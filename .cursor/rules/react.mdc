---
description: 
globs: **/*.tsx
alwaysApply: false
---
### Guidelines for React

#### React Coding Standards

- Use functional components with hooks instead of class components
- Implement React.memo() for expensive components that render often with the same props
- Utilize React.lazy() and Suspense for code-splitting and performance optimization
- Use the useCallback hook for event handlers passed to child components to prevent unnecessary re-renders
- Prefer useMemo for expensive calculations to avoid recomputation on every render
- Implement useId() for generating unique IDs for accessibility attributes
- Consider using the new useOptimistic hook for optimistic UI updates in forms
- Use useTransition for non-urgent state updates to keep the UI responsive

Key Principles
- Use functional, declarative programming. Avoid classes.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Favor named exports for components.
- Use TypeScript for all code. Prefer interfaces over types.
- File structure: imports, types, main component, subcomponents, helpers, static content.
- Use Zod for form validation.
- Use Zustand for state managament.
- Use Shadcn UI, Radix, and Tailwind CSS for components and styling.

#### NEXT_JS

- Use App Router and Server Components for improved performance and SEO
- Implement route handlers for API endpoints instead of the pages/api directory
- Use server actions for form handling and data mutations from Server Components
- Leverage Next.js Image component with proper sizing for core web vitals optimization
- Implement the Metadata API for dynamic SEO optimization
- Use React Server Components for flashcard fetching and AI generation requests to reduce client-side JavaScript
- Implement Streaming and Suspense for improved loading states
- Use the new Link component without requiring a child <a> tag
- Leverage parallel routes for complex layouts and parallel data fetching
- Implement intercepting routes for modal patterns and nested UIs

#### Client vs Server Components

- Add 'use client' directive at the top of the file (before any imports) when the component:
  - Uses React hooks (useState, useEffect, useReducer, etc.)
  - Needs interactivity or event listeners (onClick, onChange, etc.)
  - Uses browser-only APIs
  - Uses custom hooks that depend on state or effects
  - Uses React Class components
  - Requires client-side JavaScript functionality

Example of a Client Component:
```typescript
'use client'

import { useState } from 'react'

export default function Counter() {
  const [count, setCount] = useState(0)
  
  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  )
}
```

#### Best Practices for Client/Server Components

- Keep Server Components as the default choice when possible
- Move Client Components down the component tree to minimize client-side JavaScript
- When using third-party components that use client-side features:
  - Use them within existing Client Components, or
  - Wrap them in a new Client Component if they need to be used in Server Components
- For better performance, prefer keeping layouts and static UI elements as Server Components
- Only mark components as 'use client' when they actually need client-side interactivity
- 